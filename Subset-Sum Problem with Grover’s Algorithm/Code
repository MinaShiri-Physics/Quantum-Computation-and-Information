{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Libraries"
      ],
      "metadata": {
        "id": "u_VZNfNN27x6"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a6eb0bd6",
        "outputId": "0ef482ce-d370-496a-f056-cc59acde2c37"
      },
      "source": [
        "!pip install numpy qiskit qiskit-aer matplotlib pylatexenc\n",
        "import numpy as np\n",
        "from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister\n",
        "from qiskit.circuit.library import QFT\n",
        "from qiskit_aer.primitives import Sampler\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Collecting qiskit\n",
            "  Downloading qiskit-2.1.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\n",
            "Collecting qiskit-aer\n",
            "  Downloading qiskit_aer-0.17.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.3 kB)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Collecting pylatexenc\n",
            "  Downloading pylatexenc-2.10.tar.gz (162 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m162.6/162.6 kB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting rustworkx>=0.15.0 (from qiskit)\n",
            "  Downloading rustworkx-0.16.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\n",
            "Requirement already satisfied: scipy>=1.5 in /usr/local/lib/python3.11/dist-packages (from qiskit) (1.16.0)\n",
            "Requirement already satisfied: dill>=0.3 in /usr/local/lib/python3.11/dist-packages (from qiskit) (0.3.8)\n",
            "Collecting stevedore>=3.0.0 (from qiskit)\n",
            "  Downloading stevedore-5.4.1-py3-none-any.whl.metadata (2.3 kB)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from qiskit) (4.14.1)\n",
            "Requirement already satisfied: psutil>=5 in /usr/local/lib/python3.11/dist-packages (from qiskit-aer) (5.9.5)\n",
            "Requirement already satisfied: python-dateutil>=2.8.0 in /usr/local/lib/python3.11/dist-packages (from qiskit-aer) (2.9.0.post0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.59.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.0->qiskit-aer) (1.17.0)\n",
            "Collecting pbr>=2.0.0 (from stevedore>=3.0.0->qiskit)\n",
            "  Downloading pbr-6.1.1-py2.py3-none-any.whl.metadata (3.4 kB)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from pbr>=2.0.0->stevedore>=3.0.0->qiskit) (75.2.0)\n",
            "Downloading qiskit-2.1.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.5/7.5 MB\u001b[0m \u001b[31m105.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading qiskit_aer-0.17.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.4/12.4 MB\u001b[0m \u001b[31m135.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading rustworkx-0.16.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m94.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading stevedore-5.4.1-py3-none-any.whl (49 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.5/49.5 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pbr-6.1.1-py2.py3-none-any.whl (108 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m109.0/109.0 kB\u001b[0m \u001b[31m9.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hBuilding wheels for collected packages: pylatexenc\n",
            "  Building wheel for pylatexenc (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pylatexenc: filename=pylatexenc-2.10-py3-none-any.whl size=136817 sha256=6a83a1f8d9fb90daec84c49faeb2710a07a4c3f4d34d5ffc51389256037e3834\n",
            "  Stored in directory: /root/.cache/pip/wheels/b1/7a/33/9fdd892f784ed4afda62b685ae3703adf4c91aa0f524c28f03\n",
            "Successfully built pylatexenc\n",
            "Installing collected packages: pylatexenc, rustworkx, pbr, stevedore, qiskit, qiskit-aer\n",
            "Successfully installed pbr-6.1.1 pylatexenc-2.10 qiskit-2.1.1 qiskit-aer-0.17.1 rustworkx-0.16.0 stevedore-5.4.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8d3085f2"
      },
      "source": [
        "## Classical SSolution\n",
        "\n",
        "We define the set of numbers (weights) and the target sum.\n",
        "For this example, we use n=4 as requested."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a0be36a1",
        "outputId": "fafc919c-f1ac-43ed-ab26-a278b60dcdd9"
      },
      "source": [
        "weights = [1, 2, 4, 5]\n",
        "target_sum = 7\n",
        "\n",
        "# --- Find classical solutions for verification ---\n",
        "# This helps us know what to expect from the quantum algorithm.\n",
        "def find_classical_solutions(weights, target):\n",
        "    \"\"\"Finds all subsets that sum to the target value classically.\"\"\"\n",
        "    solutions = []\n",
        "    num_weights = len(weights)\n",
        "    for i in range(2**num_weights):\n",
        "        current_sum = 0\n",
        "        # Format the number `i` as a binary string with leading zeros\n",
        "        bit_string = format(i, f'0{num_weights}b')\n",
        "        for j in range(num_weights):\n",
        "            if bit_string[j] == '1':\n",
        "                current_sum += weights[j]\n",
        "        if current_sum == target:\n",
        "            # Qiskit reads bitstrings from right to left, so we reverse it\n",
        "            solutions.append(bit_string[::-1])\n",
        "    return solutions\n",
        "\n",
        "classical_solutions = find_classical_solutions(weights, target_sum)\n",
        "print(f\"Problem: Find a subset of {weights} that sums to {target_sum}\")\n",
        "if classical_solutions:\n",
        "    print(f\"Classical solutions (bitstrings): {classical_solutions}\")\n",
        "else:\n",
        "    print(\"No classical solution found.\")"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Problem: Find a subset of [1, 2, 4, 5] that sums to 7\n",
            "Classical solutions (bitstrings): ['1010', '0111']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b2d9fe16"
      },
      "source": [
        "## Quantum Algorithm Components"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2ac6e7a6"
      },
      "source": [
        "### Quantum Adder Circuit\n",
        "\n",
        "This circuit calculates the sum Σ(w_i * x_i) into a sum register.\n",
        "We use a Quantum Fourier Transform (QFT) based adder."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "08805725"
      },
      "source": [
        "def controlled_adder(qc, weights, var_qubits, sum_qubits):\n",
        "    \"\"\"\n",
        "    Creates a circuit to add weights to the sum_qubits register,\n",
        "    controlled by the var_qubits register.\n",
        "    \"\"\"\n",
        "    num_sum_qubits = len(sum_qubits)\n",
        "    for i, weight in enumerate(weights):\n",
        "        # For each weight, apply controlled phase rotations\n",
        "        for j in range(num_sum_qubits):\n",
        "            # The angle of rotation depends on the weight and the qubit's place value\n",
        "            angle = (2 * np.pi * weight) / (2**(j + 1))\n",
        "            qc.cp(angle, var_qubits[i], sum_qubits[j])\n",
        "\n",
        "def sum_circuit(weights, num_var_qubits):\n",
        "    \"\"\"\n",
        "    Constructs the full quantum adder circuit.\n",
        "    \"\"\"\n",
        "    # Determine the number of qubits needed for the sum\n",
        "    max_sum = sum(weights)\n",
        "    num_sum_qubits = int(np.ceil(np.log2(max_sum + 1))) if max_sum > 0 else 1\n",
        "\n",
        "    # Define quantum registers\n",
        "    var_reg = QuantumRegister(num_var_qubits, name='var')\n",
        "    sum_reg = QuantumRegister(num_sum_qubits, name='sum')\n",
        "    qc = QuantumCircuit(var_reg, sum_reg, name='Sum')\n",
        "\n",
        "    # 1. Apply QFT to the sum register\n",
        "    qc.append(QFT(num_sum_qubits, do_swaps=False, name='QFT'), sum_reg)\n",
        "\n",
        "    # 2. Add weights controlled by variable qubits\n",
        "    controlled_adder(qc, weights, var_reg, sum_reg)\n",
        "\n",
        "    # 3. Apply inverse QFT to get the sum in binary\n",
        "    qc.append(QFT(num_sum_qubits, do_swaps=False, inverse=True, name='IQFT'), sum_reg)\n",
        "\n",
        "    # Decompose the circuit into basic gates before returning\n",
        "    return qc.decompose(), num_sum_qubits"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8ff6744b"
      },
      "source": [
        "### Oracle Circuit\n",
        "\n",
        "The oracle marks the states where the sum equals the target."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2541be8a"
      },
      "source": [
        "def oracle(weights, target_sum):\n",
        "    \"\"\"\n",
        "    Constructs the oracle for the Subset-Sum problem.\n",
        "    It marks states |x> where the sum of selected weights equals target_sum.\n",
        "    \"\"\"\n",
        "    num_var_qubits = len(weights)\n",
        "\n",
        "    # Create the adder circuit to compute the sum\n",
        "    adder_qc, num_sum_qubits = sum_circuit(weights, num_var_qubits)\n",
        "\n",
        "    # Define all necessary registers\n",
        "    var_reg = QuantumRegister(num_var_qubits, name='var')\n",
        "    sum_reg = QuantumRegister(num_sum_qubits, name='sum')\n",
        "    flag_qubit = QuantumRegister(1, name='flag') # This qubit is flipped if sum == target\n",
        "\n",
        "    oracle_qc = QuantumCircuit(var_reg, sum_reg, flag_qubit, name='Oracle')\n",
        "\n",
        "    # 1. Compute the sum\n",
        "    oracle_qc.append(adder_qc.to_gate(), oracle_qc.qubits[:num_var_qubits + num_sum_qubits])\n",
        "\n",
        "    # 2. Compare the sum with the target\n",
        "    # Convert target to binary string\n",
        "    target_binary = format(target_sum, f'0{num_sum_qubits}b')[::-1] # Reverse for Qiskit's order\n",
        "\n",
        "    # Flip sum qubits that are '0' in the target binary representation\n",
        "    for i in range(num_sum_qubits):\n",
        "        if target_binary[i] == '0':\n",
        "            oracle_qc.x(sum_reg[i])\n",
        "\n",
        "    # 3. Mark the state if all sum qubits are now |1> (i.e., sum == target)\n",
        "    oracle_qc.mcx(sum_reg, flag_qubit)\n",
        "\n",
        "    # 4. Uncomputation: Reverse the comparison and sum calculation\n",
        "    # to restore qubits to their original state (crucial for Grover's)\n",
        "    for i in range(num_sum_qubits):\n",
        "        if target_binary[i] == '0':\n",
        "            oracle_qc.x(sum_reg[i])\n",
        "\n",
        "    oracle_qc.append(adder_qc.inverse().to_gate(), oracle_qc.qubits[:num_var_qubits + num_sum_qubits])\n",
        "\n",
        "    return oracle_qc"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "589a1ff5"
      },
      "source": [
        "### Diffuser (Amplifier) Circuit"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e187773e"
      },
      "source": [
        "def diffuser(num_var_qubits):\n",
        "    \"\"\"\n",
        "    Constructs the Grover diffuser (amplitude amplification) circuit.\n",
        "    \"\"\"\n",
        "    qc = QuantumCircuit(num_var_qubits, name='Diffuser')\n",
        "\n",
        "    # Apply H-gates to all variable qubits\n",
        "    qc.h(range(num_var_qubits))\n",
        "    # Apply X-gates to all variable qubits\n",
        "    qc.x(range(num_var_qubits))\n",
        "\n",
        "    # Apply multi-controlled Z-gate\n",
        "    qc.h(num_var_qubits - 1)\n",
        "    qc.mcx(list(range(num_var_qubits - 1)), num_var_qubits - 1)\n",
        "    qc.h(num_var_qubits - 1)\n",
        "\n",
        "    # Apply X-gates and H-gates again\n",
        "    qc.x(range(num_var_qubits))\n",
        "    qc.h(range(num_var_qubits))\n",
        "\n",
        "    return qc"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c90d5c38"
      },
      "source": [
        "## Main Grover Algorithm Construction"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f00c2b7c",
        "outputId": "af3f3583-3322-42b5-f44a-75db23d70c31"
      },
      "source": [
        "num_var_qubits = len(weights)\n",
        "\n",
        "# --- Determine optimal number of Grover iterations ---\n",
        "# N = 2^n, M = number of solutions\n",
        "N = 2**num_var_qubits\n",
        "M = len(classical_solutions) if len(classical_solutions) > 0 else 1\n",
        "# The formula is (pi/4) * sqrt(N/M)\n",
        "num_iterations = int(np.floor(np.pi / 4 * np.sqrt(N / M)))\n",
        "print(f\"Optimal number of Grover iterations: {num_iterations}\")\n",
        "\n",
        "\n",
        "# --- Build the full circuit ---\n",
        "# Get the oracle and diffuser circuits\n",
        "oracle_qc = oracle(weights, target_sum)\n",
        "diffuser_qc = diffuser(num_var_qubits)\n",
        "\n",
        "# Define all registers for the final circuit\n",
        "var_reg = QuantumRegister(num_var_qubits, name='var')\n",
        "# The oracle needs auxiliary qubits for sum and a flag\n",
        "sum_reg = oracle_qc.qregs[1]\n",
        "flag_qubit = oracle_qc.qregs[2]\n",
        "# We need a classical register to store measurement results\n",
        "cr = ClassicalRegister(num_var_qubits, name='c')\n",
        "\n",
        "# Main circuit\n",
        "grover_circuit = QuantumCircuit(var_reg, sum_reg, flag_qubit, cr)\n",
        "\n",
        "# 1. Initialize state\n",
        "# Put variable qubits in superposition\n",
        "grover_circuit.h(var_reg)\n",
        "# Initialize the flag qubit to |-> state\n",
        "grover_circuit.x(flag_qubit)\n",
        "grover_circuit.h(flag_qubit)\n",
        "grover_circuit.barrier()\n",
        "\n",
        "# 2. Apply Grover iterations\n",
        "for _ in range(num_iterations):\n",
        "    # Connect the oracle to ALL its required qubits\n",
        "    all_oracle_qubits = var_reg[:] + sum_reg[:] + flag_qubit[:]\n",
        "    grover_circuit.append(oracle_qc.to_gate(), all_oracle_qubits)\n",
        "\n",
        "    # The diffuser only acts on the variable qubits.\n",
        "    grover_circuit.append(diffuser_qc.to_gate(), var_reg)\n",
        "    grover_circuit.barrier()\n",
        "\n",
        "# 3. Measure the variable qubits\n",
        "grover_circuit.measure(var_reg, cr)\n",
        "\n",
        "# Optional: Draw the circuit\n",
        "# print(grover_circuit.draw(output='text', fold=-1))"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal number of Grover iterations: 2\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3841952605.py:28: DeprecationWarning: The class ``qiskit.circuit.library.basis_change.qft.QFT`` is deprecated as of Qiskit 2.1. It will be removed in Qiskit 3.0. ('Use qiskit.circuit.library.QFTGate or qiskit.synthesis.qft.synth_qft_full instead, for access to all previous arguments.',)\n",
            "  qc.append(QFT(num_sum_qubits, do_swaps=False, name='QFT'), sum_reg)\n",
            "/tmp/ipython-input-3841952605.py:34: DeprecationWarning: The class ``qiskit.circuit.library.basis_change.qft.QFT`` is deprecated as of Qiskit 2.1. It will be removed in Qiskit 3.0. ('Use qiskit.circuit.library.QFTGate or qiskit.synthesis.qft.synth_qft_full instead, for access to all previous arguments.',)\n",
            "  qc.append(QFT(num_sum_qubits, do_swaps=False, inverse=True, name='IQFT'), sum_reg)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<qiskit.circuit.instructionset.InstructionSet at 0x7ca7827ad5d0>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3584505e"
      },
      "source": [
        "## Simulation and Results\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4a11ff2e",
        "outputId": "8861ad0b-dac4-4207-dd25-0050476ff072"
      },
      "source": [
        "print(\"\\nRunning simulation...\")\n",
        "sampler = Sampler()\n",
        "job = sampler.run(grover_circuit, shots=1024)\n",
        "result = job.result()\n",
        "\n",
        "# Extract and process the results\n",
        "quasi_dist = result.quasi_dists[0]\n",
        "# *** FIX: binary_probabilities() already returns a dictionary with bitstring keys ***\n",
        "# No need to format the keys again.\n",
        "counts = quasi_dist.binary_probabilities()\n",
        "\n",
        "print(\"Simulation finished.\")\n",
        "print(\"\\nResults:\")\n",
        "print(counts)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Running simulation...\n",
            "Simulation finished.\n",
            "\n",
            "Results:\n",
            "{'1111': 0.0009765625, '0001': 0.0029296875, '1010': 0.48828125, '0111': 0.4541015625, '0011': 0.005859375, '1011': 0.0048828125, '1101': 0.0029296875, '1100': 0.005859375, '0110': 0.0009765625, '1000': 0.0087890625, '1001': 0.0068359375, '0101': 0.0068359375, '1110': 0.0048828125, '0010': 0.0029296875, '0100': 0.0029296875}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "847b6101"
      },
      "source": [
        "## Visualization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "1b31896f",
        "outputId": "c9298011-243e-449c-e1c3-ec5224f436b4"
      },
      "source": [
        "# Plot the probability distribution\n",
        "fig, ax = plt.subplots(figsize=(12, 6))\n",
        "ax.bar(counts.keys(), counts.values())\n",
        "ax.set_xlabel('Subset (Bitstring)')\n",
        "ax.set_ylabel('Probability')\n",
        "ax.set_title(f\"Subset Sum results for w={weights}, T={target_sum}\")\n",
        "plt.xticks(rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"\\nAnalysis:\")\n",
        "print(\"The bitstrings with the highest probabilities are the solutions.\")\n",
        "print(f\"The classical solutions were: {classical_solutions}\")\n",
        "print(\"Compare these with the peaks in the plot above.\")"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Analysis:\n",
            "The bitstrings with the highest probabilities are the solutions.\n",
            "The classical solutions were: ['1010', '0111']\n",
            "Compare these with the peaks in the plot above.\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
